{"version":3,"sources":["reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","components/Todo/Todo.styled.js","actions/index.js","containers/ShowTodo.js","components/Todo/Todo.js","components/TodoList/TodoList.styled.js","components/TodoList/TodoList.js","containers/Link.js","containers/FilterButton.js","components/Navigator/Navigator.styled.js","components/Navigator/Navigator.js","components/Toolbar/Toolbar.styled.js","containers/AddTodo.js","containers/Undo.js","components/Toolbar/Toolbar.js","styles/themeColour.js","containers/VisibleTodoList.js","styles/global.js","App.js","index.js"],"names":["initialState","text","completed","id","undoableTodos","undoable","state","action","type","reduce","maxId","todo","Math","max","map","filter","currentState","previousHistory","visibilityFilter","persistConfig","key","version","storage","stateReconciler","hardSet","reducers","combineReducers","todos","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","StyledTodo","styled","div","theme","hoverItemColour","toggleTodo","VisibilityFilters","connect","dispatch","modal","toggle","useState","todoText","changeText","onToggleTodo","Modal","isOpen","centered","className","fade","ModalHeader","Form","ModalBody","FormGroup","Input","style","boxSizing","placeholder","onChange","event","target","value","ModalFooter","Button","color","onClick","trim","editTodo","removeTodo","Todo","setModal","backgroundColor","StyledTodoList","TodoList","Link","active","children","e","preventDefault","FilterButton","ownProps","StyledNavigator","primaryButtonColour","Navigator","StyledToolbar","Label","for","Undo","canUndo","onUndo","disabled","mapDispatchToProps","UndoActionCreators","undo","past","length","Toolbar","themeColour","completedItemColour","tablet","mobile","getVisibleTodos","t","VisibleTodoList","present","GlobalStyles","createGlobalStyle","App","margin","textAlign","fontWeight","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.963d408b.chunk.js","sourcesContent":["import undoable from 'redux-undo'\n\nconst initialState = [\n    {\n        text: 'iTodo initial state',\n        completed: false,\n        id: 0,\n    },\n]\n\nconst todos = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id:\n                        state.reduce(\n                            (maxId, todo) => Math.max(todo.id, maxId),\n                            -1\n                        ) + 1,\n                    completed: false,\n                    text: action.text,\n                },\n            ]\n\n        case 'TOGGLE_TODO':\n            return state.map(todo => {\n                if (todo.id !== action.id) {\n                    return state\n                }\n                return {\n                    ...todo,\n                    completed: !todo.completed,\n                }\n            })\n\n        case 'REMOVE_TODO':\n            return state.filter(todo => todo.id !== action.id)\n\n        case 'EDIT_TODO':\n            return state.map(todo =>\n                todo.id === action.id ? { ...todo, text: action.text } : todo\n            )\n\n        default:\n            return state\n    }\n}\n\nconst undoableTodos = undoable(todos, {\n    filter: function filterActions(action, currentState, previousHistory) {\n        return action.type === 'REMOVE_TODO'\n    },\n})\n\nexport default undoableTodos\n","const visibilityFilter = (state = 'SHOW_ALL', action) => {\n    switch (action.type) {\n        case 'SET_VISIBILITY_FILTER':\n            return action.filter\n        default:\n            return state\n    }\n}\n\nexport default visibilityFilter\n","import { combineReducers, createStore } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport hardSet from 'redux-persist/lib/stateReconciler/hardSet'\n\nconst persistConfig = {\n    key: 'todos',\n    version: 1,\n    storage: storage,\n    stateReconciler: hardSet,\n}\n\nconst reducers = combineReducers({\n    todos,\n    visibilityFilter,\n})\n\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nconst store = createStore(\n    persistedReducer,\n    ['todo'],\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport const persistor = persistStore(store)\n\nexport default store\n","import styled from 'styled-components'\n\nexport const StyledTodo = styled.div`\n    li {\n        display: flex;\n        flex-wrap: row;\n        height: 40px;\n        border-bottom: solid 1px lightgrey;\n        padding: 5px;\n\n        p {\n            margin: auto;\n            margin-left: 10px;\n        }\n\n        &:hover {\n            cursor: pointer;\n            background: ${({ theme }) => theme.hoverItemColour};\n        }\n    }\n`\n","export const addTodo = text => ({\n    type: 'ADD_TODO',\n    text,\n})\n\nexport const editTodo = (id, text) => ({\n    type: 'EDIT_TODO',\n    id,\n    text,\n})\n\nexport const removeTodo = id => ({\n    type: 'REMOVE_TODO',\n    id,\n})\n\nexport const toggleTodo = id => ({\n    type: 'TOGGLE_TODO',\n    id,\n})\n\nexport const setVisibilityFilter = filter => ({\n    type: 'SET_VISIBILITY_FILTER',\n    filter,\n})\n\nexport const VisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE',\n}\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Button,\n    Modal,\n    ModalFooter,\n    ModalHeader,\n    ModalBody,\n    Input,\n    Form,\n    FormGroup,\n} from 'reactstrap'\nimport { editTodo, removeTodo, toggleTodo } from '../actions'\n\nconst ShowTodo = ({ dispatch, completed, modal, toggle, id, text }) => {\n    let [todoText, changeText] = useState(text)\n\n    const onToggleTodo = () => {\n        dispatch(toggleTodo(id))\n        toggle(false)\n    }\n\n    const onTextChange = event => {\n        changeText(event.target.value)\n    }\n\n    const onEditTodo = () => {\n        if (!todoText.trim()) {\n            return\n        }\n        dispatch(editTodo(id, todoText))\n        toggle(false)\n    }\n\n    const onRemoveTodo = () => {\n        dispatch(removeTodo(id))\n        toggle(false)\n    }\n\n    return (\n        <div>\n            <Modal\n                isOpen={modal}\n                toggle={toggle}\n                centered={true}\n                className=\"h-50 col-lg-4 col-md-6 col-sm-10\"\n                fade={true}\n            >\n                <ModalHeader>Your todo</ModalHeader>\n                <Form>\n                    <ModalBody>\n                        <FormGroup>\n                            <Input\n                                style={{ boxSizing: 'border-box' }}\n                                type=\"textarea\"\n                                id=\"todo-text\"\n                                placeholder={text}\n                                onChange={onTextChange}\n                            />\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter className=\"justify-content-between\">\n                        <Button color=\"primary\" onClick={onEditTodo}>\n                            Save\n                        </Button>\n                        <Button color=\"danger\" onClick={onRemoveTodo}>\n                            Remove\n                        </Button>\n                        {!completed ? (\n                            <Button color=\"success\" onClick={onToggleTodo}>\n                                Complete\n                            </Button>\n                        ) : (\n                            <Button color=\"warning\" onClick={onToggleTodo}>\n                                Incomplete\n                            </Button>\n                        )}\n                        <Button onClick={toggle}>Cancel</Button>\n                    </ModalFooter>\n                </Form>\n            </Modal>\n        </div>\n    )\n}\n\nexport default connect()(ShowTodo)\n","import React, { useState } from 'react'\nimport { StyledTodo } from './Todo.styled'\nimport ShowTodo from '../../containers/ShowTodo'\n\nconst Todo = ({ completed, text, id }) => {\n    const [modal, setModal] = useState(false)\n    const toggle = () => setModal(!modal)\n\n    return (\n        <>\n            <StyledTodo>\n                <li\n                    onClick={() => setModal(true)}\n                    style={{\n                        backgroundColor: completed ? '#86fcbd' : '',\n                    }}\n                >\n                    <p>{text}</p>\n                </li>\n            </StyledTodo>\n            {modal ? (\n                <ShowTodo\n                    completed={completed}\n                    id={id}\n                    text={text}\n                    modal={modal}\n                    toggle={toggle}\n                />\n            ) : (\n                <div />\n            )}\n        </>\n    )\n}\n\nexport default Todo\n","import styled from 'styled-components'\n\nexport const StyledTodoList = styled.div`\n    overflow-y: scroll;\n    border: 2px solid navy;\n    height: 60vh;\n`\n","import React from 'react'\nimport { StyledTodoList } from './TodoList.styled'\nimport { Todo } from '../index'\n\nconst TodoList = ({ todos }) => (\n    <StyledTodoList>\n        {todos.map(todo => (\n            <Todo key={todo.id} {...todo} />\n        ))}\n    </StyledTodoList>\n)\n\nexport default TodoList\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Link = ({ active, children, onClick }) => {\n    if (active) {\n        return <button style={{ backgroundColor: 'navy' }}>{children}</button>\n    }\n\n    return (\n        <button\n            onClick={e => {\n                e.preventDefault()\n                onClick()\n            }}\n        >\n            {children}\n        </button>\n    )\n}\n\nLink.propTypes = {\n    active: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default Link\n","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\nimport Link from './Link'\n\nconst mapStateToProps = (state, ownProps) => ({\n    active: ownProps.filter === state.visibilityFilter,\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onClick: () => {\n        dispatch(setVisibilityFilter(ownProps.filter))\n    },\n})\n\nconst FilterButton = connect(mapStateToProps, mapDispatchToProps)(Link)\n\nexport default FilterButton\n","import styled from 'styled-components'\n\nexport const StyledNavigator = styled.div`\n    margin: 0;\n    backface-visibility: hidden;\n\n    button {\n        border: 0;\n        border-radius: 0;\n        padding: 12px;\n        color: white;\n        background-color: ${({ theme }) => theme.primaryButtonColour};\n\n        &:active {\n            background-color: navy;\n        }\n\n        &:hover {\n            background-color: navy;\n        }\n    }\n`\n","import React from 'react'\nimport FilterButton from '../../containers/FilterButton'\nimport { VisibilityFilters } from '../../actions'\nimport { StyledNavigator } from './Navigator.styled'\n\nconst Navigator = () => (\n    <StyledNavigator>\n        <FilterButton filter={VisibilityFilters.SHOW_ALL}>All</FilterButton>\n        <FilterButton filter={VisibilityFilters.SHOW_ACTIVE}>\n            Todos\n        </FilterButton>\n        <FilterButton filter={VisibilityFilters.SHOW_COMPLETED}>\n            Completed\n        </FilterButton>\n    </StyledNavigator>\n)\n\nexport default Navigator\n","import styled from 'styled-components'\n\nexport const StyledToolbar = styled.div`\n    margin: 0;\n    text-align-last: end;\n\n    button {\n        border: 0;\n        border-radius: 0;\n        cursor: pointer;\n        border-radius: 0;\n        padding: 12px;\n        color: white;\n        background-color: ${({ theme }) => theme.primaryButtonColour};\n\n        &:hover {\n            background-color: navy;\n        }\n    }\n`\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Button,\n    Modal,\n    ModalFooter,\n    ModalHeader,\n    ModalBody,\n    Input,\n    Label,\n    Form,\n    FormGroup,\n} from 'reactstrap'\nimport { addTodo } from '../actions'\n\nconst AddTodo = ({ dispatch, modal, toggle }) => {\n    let [todoText, changeText] = useState('')\n\n    const onTextChange = event => {\n        changeText(event.target.value)\n    }\n\n    const onSubmit = e => {\n        e.preventDefault()\n        if (!todoText.trim()) {\n            return\n        }\n        dispatch(addTodo(todoText))\n        changeText('')\n        toggle(false)\n    }\n\n    return (\n        <div>\n            <Modal\n                isOpen={modal}\n                toggle={toggle}\n                centered={true}\n                className=\"h-50 col-lg-4 col-md-6 col-sm-10\"\n                fade={true}\n            >\n                <ModalHeader>Add todo</ModalHeader>\n                <Form>\n                    <ModalBody>\n                        <FormGroup>\n                            <Label for=\"writing\">Write your todo</Label>\n                            <Input\n                                style={{ boxSizing: 'border-box' }}\n                                type=\"textarea\"\n                                id=\"todo-text\"\n                                onChange={onTextChange}\n                            />\n                        </FormGroup>\n                    </ModalBody>\n                    <ModalFooter className=\"justify-content-between\">\n                        <Button color=\"primary\" onClick={onSubmit}>\n                            Add\n                        </Button>\n                        <Button className=\"ml-5\" onClick={toggle}>\n                            Cancel\n                        </Button>\n                    </ModalFooter>\n                </Form>\n            </Modal>\n        </div>\n    )\n}\n\nexport default connect()(AddTodo)\n","import React from 'react'\nimport { ActionCreators as UndoActionCreators } from 'redux-undo'\nimport { connect } from 'react-redux'\n\nlet Undo = ({ canUndo, onUndo }) => (\n    <button onClick={onUndo} disabled={!canUndo}>\n        Unremove\n    </button>\n)\n\nconst mapStateToProps = state => ({\n    canUndo: state.todos.past.length > 0,\n})\n\nconst mapDispatchToProps = {\n    onUndo: UndoActionCreators.undo,\n}\n\nUndo = connect(mapStateToProps, mapDispatchToProps)(Undo)\n\nexport default Undo\n","import React, { useState } from 'react'\nimport { StyledToolbar } from './Toolbar.styled'\nimport AddTodo from '../../containers/AddTodo'\nimport Undo from '../../containers/Undo'\n\nconst Toolbar = () => {\n    const [modal, setModal] = useState(false)\n    const toggle = () => setModal(!modal)\n\n    return (\n        <>\n            <StyledToolbar>\n                <button onClick={() => setModal(true)}>Add new</button>\n                <Undo />\n            </StyledToolbar>\n            {modal ? <AddTodo modal={modal} toggle={toggle} /> : <div />}\n        </>\n    )\n}\n\nexport default Toolbar\n","export const themeColour = {\n    primaryButtonColour: '#05c5ff',\n    hoverItemColour: '#89d8fa',\n    completedItemColour: '#86fcbd',\n    tablet: '768px',\n    mobile: '576px',\n}\n","import { connect } from 'react-redux'\nimport { toggleTodo } from '../actions'\nimport { TodoList } from '../components/index'\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n        case 'SHOW_ALL':\n            return todos\n        case 'SHOW_COMPLETED':\n            return todos.filter(t => t.completed)\n        case 'SHOW_ACTIVE':\n            return todos.filter(t => !t.completed)\n        default:\n            // throw new Error('Unknown filter: ' + filter)\n            return null\n    }\n}\n\nconst mapStateToProps = state => ({\n    todos: getVisibleTodos(state.todos.present, state.visibilityFilter),\n})\n\nconst mapDispatchToProps = {\n    onToggleTodo: toggleTodo,\n}\n\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList)\n\nexport default VisibleTodoList\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyles = createGlobalStyle`\n    html {\n        margin: 0;\n        padding: 0;\n        \n        *, *::before, *::after {\n            box-sizing: content-box;\n        }\n    }\n\n    body {\n        margin: 0 20%;\n        width: 60%;\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\";\n        height: 100% !important;\n        text-rendering: optimizeLegibility;\n        \n        @media(max-width: ${({ theme }) => theme.mobile}) {\n            margin: 0;\n            width: 100%;\n        }\n        @media(max-width: ${({ theme }) => theme.tablet}) {\n            margin: 0 10%;\n            width: 80%;\n        } \n        \n        \n    }\n\n`\n","import React from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport { Navigator, Toolbar } from './components/index'\nimport { themeColour } from './styles/themeColour'\nimport VisibleTodoList from './containers/VisibleTodoList'\nimport { GlobalStyles } from './styles/global'\n\nconst App = () => (\n    <ThemeProvider theme={themeColour}>\n        <>\n            <GlobalStyles />\n            <h1\n                style={{\n                    margin: '20px auto',\n                    textAlign: 'center',\n                    fontWeight: '200',\n                }}\n            >\n                iTodolist\n            </h1>\n            <Navigator />\n            <VisibleTodoList />\n            <Toolbar />\n        </>\n    </ThemeProvider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport store, { persistor } from './reducers/index'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}